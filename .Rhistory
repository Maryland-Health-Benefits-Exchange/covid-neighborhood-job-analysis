source('H:/Documents/Uninsured_by_zip/R Studio/COVID19_Uninsured_Analysis/covid-neighborhood-job-analysis-master/scripts/update-master.R', echo=TRUE)
# Ensure there are no NAs in the data
assert(ces_all_modified %>%
filter(is.na(series_id) | series_id == "") %>%
nrow() == 0)
ces_all_modified = ces_all %>%
# filter out any series that start with 1 or 2
filter(!(str_starts(series_id, "CES2") |
str_starts(series_id, "CES2"))) %>%
bind_rows(subseries_01) %>%
bind_rows(subseries_02)
# Ensure there are no NAs in the data
assert(ces_all_modified %>%
filter(is.na(series_id) | series_id == "") %>%
nrow() == 0)
# Write out
ces_all_modified %>% write_tsv("data/raw-data/big/ces_all_modified.txt")
source("scripts\\update\\2v4a-job-loss-projected-forward-ces.R", encoding = "UTF-8") # verified, need
source("scripts\\update\\2v4b-job-loss-by-industry-ces-sae-ipums-update.R", encoding = "UTF-8") # verified, need
source("scripts\\update\\2v4c-job-loss-by-industry-ipums-update.R", encoding = "UTF-8") # verified, need
source("scripts\\update\\2v4d-job-loss-by-industry-ipums-summary-update.R", encoding = "UTF-8") # verified, need
source("scripts\\update\\2v4d-job-loss-by-industry-ipums-summary-update.R", encoding = "UTF-8") # verified, need
source("scripts\\update\\3-produce-data-files-update.R", encoding = "UTF-8") # verified, need
# stop because you need to review the histograms and confirm legend bounds
#stop() # E.Leo: not producing histograms
source("scripts\\update\\5-create-sum-files-update.R", encoding = "UTF-8")
setwd("H:/Documents/Uninsured_by_zip/R Studio/COVID19_Uninsured_Analysis")
saveRDS(ipums_data_merge, file = "data/processed/ipums-data-merge.Rds")
setwd("H:/Documents/Uninsured_by_zip/R Studio/COVID19_Uninsured_Analysis/covid-neighborhood-job-analysis-master")
source("scripts\\update\\2v4d-job-loss-by-industry-ipums-summary-update.R", encoding = "UTF-8") # verified, need
pums_data_merge <- ipums_data %>%
mutate(IND = str_pad(as.character(IND), 4, side = "left", pad = "0"),
state = str_pad(as.character(STATEFIP), 2, side = "left", pad = "0"),
puma = str_pad(as.character(PUMA), 5, side = "left", pad = "0")) %>%
left_join(acs_estimates, by = c("IND", "state")) %>%
mutate(percent_change_state_imputed = replace_na(percent_change_state_imputed, 0),
random_number = runif(n()),
disemploy = ifelse((random_number < (1 + percent_change_state_imputed)) | EMPSTAT != 1,
0, 1),
# wage_level = ifelse(INCWAGE < 40000, 1, 0), commented to remove wage limit
is_employed = ifelse(EMPSTAT == 1, 1, 0),
total_employment = PERWT * is_employed,
total_disemployment = -total_employment * percent_change_state_imputed)
# Read in estimates and crosswalk data
ddi <- read_ipums_ddi(acs_ipums_path)
ipums_data <- read_ipums_micro(ddi)
acs_estimates <- read_csv(acs_estimates_path)
acs_estimates$state <- as.character(acs_estimates$state)
## Merge and disemploy -----------------------------------------------------
# Set seed
set.seed(20200525)
# Merge and generate disemployment flag, only if person is currently employed
ipums_data_merge <- ipums_data %>%
mutate(IND = str_pad(as.character(IND), 4, side = "left", pad = "0"),
state = str_pad(as.character(STATEFIP), 2, side = "left", pad = "0"),
puma = str_pad(as.character(PUMA), 5, side = "left", pad = "0")) %>%
left_join(acs_estimates, by = c("IND", "state")) %>%
mutate(percent_change_state_imputed = replace_na(percent_change_state_imputed, 0),
random_number = runif(n()),
disemploy = ifelse((random_number < (1 + percent_change_state_imputed)) | EMPSTAT != 1,
0, 1),
# wage_level = ifelse(INCWAGE < 40000, 1, 0), commented to remove wage limit
is_employed = ifelse(EMPSTAT == 1, 1, 0),
total_employment = PERWT * is_employed,
total_disemployment = -total_employment * percent_change_state_imputed)
generate_acs_percent_change_by_industry = function(start_month_bls = 2,
# remember to copy ACS files into this directory
# for 1-year:
start_year_bls = 2020, acs_ipums_path = "data/raw-data/big/usa_00018.xml",
# for 5-year:
# start_year_bls = 2020, acs_ipums_path = "data/raw-data/big/usa_00015.xml",
acs_estimates_path = "data/processed-data/job_change_acs_estimates_most_recent.csv",
# for 1-year:
latest_year = 2020, latest_month = 6, ipums_vintage = "2018"){
# for 5-year:
# latest_year = 2020, latest_month = 6, ipums_vintage = "2013-18"){
# Function to generate ACS job change by industry
# INPUT:
#   start_month_bls: BLS month to use as baseline to measure job loss % change
#   start_year_bls: BLS year to use as baseline to measure job loss % change
#   acs_ipums_path: path to DDI file from IPUMS (data file should be in same directory)
#   acs_estimates_path: path to state by IND estimates from 2v4c
#   latest_year: latest year from 2v4b
#   latest_month: latest month from 2v4b
#   ipums_vintage: The IPUMS vintage years used for the analysis
# OUTPUT:
# job_change_led: a dataframe, where every row is a unique PUMA and 2-digit
#   NAICS industry. This dataframe is the measure % change in net employment
#   for each PUMA-NAICS in relation to the start month and year for people earning
#   less than $40,000 per year in wages, in 2018 inflation adjusted dollars
# Read in estimates and crosswalk data
ddi <- read_ipums_ddi(acs_ipums_path)
ipums_data <- read_ipums_micro(ddi)
acs_estimates <- read_csv(acs_estimates_path)
